bitcount = 32 $

% dirvs : [[int]] %
dirvs = [[2147483648,1073741824,2684354560,1342177280,
          2281701376,603979776,301989888,754974720,
          1988100096,2654994432,136314880,1678770176,
          2988965888,2098462720,4272029696,3125346304,
          438599680,1226522624,3300237312,3816001536,
          4135585792,3728737280,2820672000,873465088,
          975702144,1494483520,3970040096,2538144464,
          1822721896,3613084132,3432358018,2271450689],

          [2147483648,1073741824,3758096384,2952790016,
          2550136832,2483027968,2315255808,1526726656,
          864026624,3653238784,1914699776,1058013184,
          3250061312,2800484352,1401290752,703922176,
          171606016,455786496,3549618176,1778348032,
          3929540608,2871788544,1269173760,4259646208,
          1610779008,4026976576,2016733344,605713840,
          305826616,3475687836,3113412898,2197780721]] $


% normalise : int -> float %
% function normalise(x) = float(x) / 2.0^bitcount $ %
function normalise(x) = float(x) / 4294967296.0 $

% not really signum, as we never return -1, 
  but in this program we never use signum on negative numbers %
function signum(x) = btoi(x == 0) $

% bitVector : int -> [int] %
function bitVector (e) = { signum(e and lshift(1, j)) : j in [0:bitcount] } $

% assumes non-empty argument %
function xor_reduce(xs) = xor_scan(xs)[#xs-1] xor xs[#xs-1] $

% This version of xor-reduce is three times slower (using the serial
  interpreter) than the one based on xor_scan.
%
function xor_red(xs) = 
   if #xs == 0 then 0 
   else if #xs == 1 then xs[0]
   else let bt = {xor_red(half) : half in bottop(xs) } ;
        in  bt[0] xor bt[1] $

% sobol : [int] * int -> float %
function sobol (v, x) = 
   normalise(xor_reduce({vi*i : (vi,i) in  zip(v, bitVector(x))})) $

% sobol1D : int * [int] -> [float] %
function sobol1D (m, v) = { sobol(v, i) : i in [1:m+1] } $

% sobolND : int * [[int]] -> [[float]] %
function sobolND (m, vs) = { sobol1D(m,v) : v in vs } $

% pi2d : [(float, float)] -> float %
function pi2d (nums) =
   let n = #nums;
       dists = { round(sqrt (x^2 + y^2)) : (x,y) in nums };
      % debug = print_string(@({ (trunc(sqrt (x*x + y*y)), sqrt (x*x + y*y)) : (x,y) in nums }));%
   in  4.0 * (float(n - sum (dists))/ float(n)) $

% computepi : int -> float %
function computepi (n) = 
   let sob = sobolND(n, dirvs);
       zipped = zip(sob[0], sob[1]); 
   in  pi2d(zipped) $

function benchpi(n) = time(computepi(n)) $