#!/bin/bash

# Make sure you have executed the following commands before running
# this script:
#   cabal update
#   cabal install c2hs alex happy

# These path variables should be set in your .profile:
#   PATH=~/.cabal/bin/:/usr/local/cuda/bin/:$PATH
#   LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
#   LD_LIBRARY_PATH=/usr/local/cuda/lib:$LD_LIBRARY_PATH

set -e

PATH=~/.cabal/bin/:/usr/local/cuda-4.2/bin/:$PATH
LD_LIBRARY_PATH=/usr/local/cuda-4.2/lib #:$LD_LIBRARY_PATH
SCRIPTFILE=`readlink -f $0`
SCRIPTROOT=`dirname $SCRIPTFILE`
ROOT=~/
cd $ROOT

BASEPATH=$PATH
BASEGHC=`ghc --version | awk -F' ' '{print $NF}'`

# deactivate current hsenv if possible
deactivate_hsenv 2> /dev/null || true

fetchGHC() {
  mkdir -p $GHC_DIR
  cd $GHC_DIR
  if [ ! -f ghc-$GHC_VERSION-x86_64-unknown-linux.tar.bz2 ]; then
      wget http://www.haskell.org/ghc/dist/$GHC_VERSION/ghc-$GHC_VERSION-x86_64-unknown-linux.tar.bz2
  fi
}

# Creates a hsenv directory for the selected project, with the
# selected GHC version.  Enters the directory and activates hsenv.
init_hsenv() {
  NAME=$1
  GHC_VERSION=$2
  GHC_DIR=$ROOT/ghc/ghc-$GHC_VERSION
  INSTALL_DIR=$ROOT/hsenvs/$NAME-GHC$GHC_VERSION/

  if [ -d $INSTALL_DIR ]; then
    echo "$INSTALL_DIR already exists, using old installation"
    cd $INSTALL_DIR
    source .hsenv_$NAME-GHC$GHC_VERSION/bin/activate
  else
      fetchGHC
      mkdir -p $INSTALL_DIR
      cd $INSTALL_DIR
      hsenv --ghc=$GHC_DIR/ghc-$GHC_VERSION-x86_64-unknown-linux.tar.bz2
      source .hsenv_$NAME-GHC$GHC_VERSION/bin/activate
      cabal install cabal-install
  fi

}

installCUDAFromHackage (){
  # Fix and install cuda bindings
  cabal unpack cuda || true
  cd cuda-*
  sed -i -e "s/import Foreign.CUDA.Driver.Exec$/import Foreign.CUDA.Driver.Exec hiding \(Max\)/" Foreign/CUDA/Driver.hs 
  autoconf
  cabal install --extra-include-dirs=/usr/local/cuda-4.2/include/ --extra-lib-dirs=/usr/local/cuda-4.2/lib64/
  cd ..
}

installAccelerateFromHackage(){
  init_hsenv "accelerate-hackage" "7.4.1"

    cabal install accelerate accelerate-io

    installCUDAFromHackage

    cabal install accelerate-cuda --extra-include-dirs=/usr/local/cuda/include/
    cabal install accelerate-examples
  deactivate_hsenv
}

# This doesn't work currently
installAccelerateFromGithub() {
  init_hsenv "accelerate-github" "7.6.1"

   #pushd /home/dybber/lib/
   #cd symbol
   #cabal install
   #cd ../mainland-pretty
   #cabal install
   #cd ../language-c-quote
   #cabal install
   #popd

   #git clone git://github.com/tmcdonell/cuda.git
   #cd cuda
   #autoconf
   #cabal install --extra-include-dirs=/usr/local/cuda/include/
   #cd ..

   #git clone git://github.com/AccelerateHS/accelerate.git
   #git clone git://github.com/AccelerateHS/accelerate-cuda.git
   #git clone git://github.com/AccelerateHS/accelerate-io.git

   #cd accelerate
   #cabal install

   #cd ../accelerate-io
   #cabal install

   #cd ../accelerate-cuda
   #autoconf
   #cabal install --extra-include-dirs=/usr/local/cuda/include/ \
   #              --extra-lib-dirs=/usr/local/cuda/lib64/
   #cd ../..

   $SCRIPTROOT/shakeAccelerateGithub
  deactivate_hsenv
}

installNikola() {
  init_hsenv "nikola" "7.4.2"

    installCUDAFromHackage
    cabal install --reinstall repa-3.2.1.1 test-framework-quickcheck2 test-framework-hunit

    if [ -d nikola ]; then
      cd nikola
      git pull
    else
      git clone git://github.com/mainland/nikola.git || true
      cd nikola
    fi

    # (configure fails because of missing dependencies, and install works just as well)
    cabal configure \
       --disable-library-profiling \
       --enable-tests \
       --flags=examples \
       --configure-option="--with-nvcc=/usr/local/cuda-4.2/bin/nvcc"
    #
    #cabal build
    #cabal install
    cabal install # \
    #   --disable-library-profiling \
    #   --enable-tests \
    #   --flags=examples \
    #   --configure-option="--with-nvcc=/usr/local/cuda-4.2/bin/nvcc"

  deactivate_hsenv
}

installFeldspar() {
  init_hsenv "feldspar" "7.0.2"
    cabal install feldspar-language 

    cabal unpack feldspar-compiler
    cd feldspar-compiler*
    sed -i -e "s/ExplicitForall/ExplicitForAll/" Feldspar/NameExtractor.hs
    cabal install
    cd ..
  deactivate_hsenv
}

installObsidian() {
  init_hsenv "obsidian" "7.0.3"
    git clone git://github.com/svenssonjoel/GCDObsidian.git obsidian
    cd obsidian
    cabal install

  deactivate_hsenv
}

installDPH() {
  init_hsenv "dph" "7.4.2"
  cabal install dph-examples
  deactivate_hsenv
}


installVanilla() {
  init_hsenv $2 $1
  deactivate_hsenv
}


show_usage() {
  echo "This command installs GHC environments for different Haskell vector languages"
  echo ""
  echo "Invoke with one or more of the following flags:"
  echo "  --nikola"
  echo "  --obsidian"
  echo "  --feldspar"
  echo "  --dph"
  echo "  --accelerate-github"
  echo "  --accelerate-hackage"
  echo "  --vanilla <GHC versionnumber, e.g. \"7.4.2\"> <name>"
}

if [ $# -lt 1 ]; then
    echo "No arguments given. Aborting."
    echo ""
    show_usage
    exit 1
fi

while [ $# -gt 0 ]; do
  case $1 in
  --nikola)
    installNikola
    shift
    continue
    ;;
  --feldspar)
    installFeldspar
    shift
    continue
    ;;
  --accelerate-github)
    installAccelerateFromGithub
    shift
    continue
    ;;
  --accelerate-hackage)
    installAccelerateFromHackage
    shift
    continue
    ;;
  --obsidian)
    installObsidian
    shift
    continue
    ;;
  --vanilla)
    shift
    if [ $# -lt 2 ]; then
      echo "Missing argument to --vanilla."
      echo ""
      show_usage
      exit 1
    fi

    (echo $1 | grep -P "[0-9]+\.[0-9]+\.[0-9]+" > /dev/null) || 
       (
        echo "Parameter to --vanilla ($1) not formatted correctly."
        echo ""
        show_usage
        exit 1
       )
    
    installVanilla $1 $2
    shift; shift
    continue
    ;;
  --dph)
    installDPH
    shift
    continue
    ;;
  *)
    echo "Unknown parameter $1"
    shift
    continue
    ;;
  esac
break
done
