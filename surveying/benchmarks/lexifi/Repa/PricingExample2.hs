{-# OPTIONS -XRecordWildCards #-}
module PricingExample2 where

import PricingTypesS
import qualified Data.Vector as V -- undecided if boxed or unboxed

import qualified Data.Array.Repa as R
import Data.Array.Repa (Z(..), (:.)(..))
-- import qualified Data.Array as DA

{-
Expected output:

Config: 100000 iterations
Computed opt: 937.2784005675547
Computed:     937.2784005682389
-}

example_init :: Integer -> Pricing_Data
example_init num_it = no_Data {
                         num_iters = num_it
                       , sobol_bit_count = 30
                       , sobol_dim =  3 * 5 -- md_dim * nb_path_dates
                       , sobol_divisor = fromIntegral (2^30)
                       , sobol_dirVs = R.fromListUnboxed (Z :. (length dirVs) :. 30) $ concat dirVs
                       , md_dim = 3
                       , md_nb_path_dates = 5
                        -----------------------
                       , md_c      = [[1.0, 0.6, 0.8]
                                     ,[0.6, 0.8, 0.15]
                                     ,[0.8, 0.15, 0.5809475019311124]
                                     ]

                       , md_vols   = [[0.19, 0.19, 0.15]
	                             ,[0.19, 0.19, 0.15]
	                             ,[0.19, 0.19, 0.15]
	                             ,[0.19, 0.19, 0.15]
	                             ,[0.19, 0.19, 0.15] -- added to fix dimensions. correct??
                                     ]
                       , md_drifts = [[-0.0283491736871803, 0.0178771081725381, 0.0043096808044729]
                                     ,[-0.0183841413744211, -0.0044530897672834, 0.0024263805987983]
                                     ,[-0.0172686581005089, 0.0125638544546015, 0.0094452810918001]
	                             ,[-0.0144179417871814, 0.0157411263968213, 0.0125315353728014]
	                             ,[-0.0121497422218761, 0.0182904634062437, 0.0151125070556484]
                                     ]
                       , md_starts = [3758.0500000000001819, 11840.0, 1200.0]
                       --------------------------
                       , model_deter_vals = [0.99976705777418484188956426805817]
                       , model_discounts  = [0.9797862861805930 , 0.9505748482484491 ,
                                             0.9214621679912968 , 0.8906693055891434 ,
                                             0.8588567633110704 ]
                       --------------------------
                       , bb_l = 5
                       , bb_sd = V.fromList
                                 [2.2372928847280580, 1.0960951589853829, 0.7075902730592357,
                                  0.8166828043492210, 0.7075902730592357 ]
                       , bb_lw = V.fromList
                                    [0.0000000000000000, 0.5998905309250137, 0.4993160054719562,
                                     0.6669708029197080, 0.5006839945280438] -- computed from input
                       , bb_rw = V.fromList
                                 [ 0.0000000000000000, 0.4001094690749863, 0.5006839945280438,
                                   0.3330291970802919, 0.4993160054719562 ] -- computed from input
                       , bb_bi = V.fromList [5,2,1,3,4]
                       , bb_li = V.fromList [0,0,0,2,3] -- computed from input
                       , bb_ri = V.fromList [0,5,2,5,5] -- computed from input
                       , product_payoff = payoff_2
                       }
    where payoff_2 :: Payoff
          payoff_2 Pricing_Data{..} xss       -- TODO: replace ``mins'' and ``model_discounts'' with arrays for efficiency!
            | length xss < 5 = error (show (xss))
            | otherwise =
                  let divs = [1.0/3758.05, 1.0/11840.0, 1.0/1200.0]
                      xss_div :: [[SpecReal]]
                      xss_div = map (\xs -> zipWith (*) xs divs) xss
                      mins = map (\xs -> foldr min (head xs) (tail xs)) xss_div
                      traj_inner amount ind = amount * (model_discounts !! ind);
                  in if( 1.0 <= (mins !! 0) ) then traj_inner 1150.0 0
                     else if( 1.0 <= (mins !! 1) ) then traj_inner 1300.0 1
                          else if( 1.0 <= (mins !! 2) ) then traj_inner 1450.0 2
                               else if( 1.0 <= (mins !! 3) ) then traj_inner 1600.0 3
                                    else if( 1.0 <= (mins !! 4) ) then traj_inner 1750.0 4
                                         else if( (mins !! 4) > 0.75 ) then traj_inner 1000.0 4
                                              else traj_inner (1000.0 * (mins !! 4)) 4


          dirVs =[[536870912,268435456,134217728,67108864,33554432,16777216,8388608,4194304,
                   2097152,1048576,524288,262144,131072,65536,32768,16384,8192,
                   4096,2048,1024,512,256,128,64,32,16,8,4,2,1],
                  [536870912,805306368,671088640,1006632960,570425344,855638016,713031680,1069547520,
                   538968064,808452096,673710080,1010565120,572653568,858980352,715816960,1073725440,
                   536879104,805318656,671098880,1006648320,570434048,855651072,713042560,1069563840,
                   538976288,808464432,673720360,1010580540,572662306,858993459],
                  [536870912,805306368,402653184,603979776,973078528,385875968,595591168,826277888,
                   438304768,657457152,999817216,358875136,538574848,807862272,406552576,605372416,
                   975183872,389033984,597170176,828646400,437926400,656873216,1002152832,357921088,
                   536885792,805312304,402662296,603992420,973085210,385885991],
                  [536870912,805306368,939524096,335544320,234881024,721420288,411041792,616562688,
                   920649728,1062207488,381157376,258736128,771883008,453181440,545488896,817971200,
                   954261504,340963328,238651392,732843008,417426944,609285376,909831040,1068349120,
                   383778848,256901168,783810616,460062740,537001998,805503019],
                  [536870912,805306368,402653184,1006632960,167772160,285212672,713031680,566231040,
                   853540864,489684992,952631296,208928768,316801024,758317056,550076416,813154304,
                   417505280,1009913856,172697600,297131008,704744960,553894656,847291520,499194688,
                   954376224,204607536,306915352,766893116,536972810,805552913],
                  [536870912,805306368,402653184,469762048,301989888,721420288,92274688,264241152,
                   941621248,741343232,169345024,924581888,395444224,619380736,1034256384,603963392,
                   838868992,452997120,494934016,331357184,706744832,120597248,261621120,953946048,
                   800208928,148581424,935168536,350484252,630339474,1072370923],
                  [536870912,805306368,134217728,1006632960,503316480,754974720,629145600,440401920,
                   94371840,711983104,229113856,374079488,330694656,996212736,907247616,557531136,
                   867573760,190918656,1041467392,490437632,766918144,643898624,462663040,125527616,
                   672545696,202454896,373006376,288845836,1000351766,930090001],
                  [536870912,268435456,402653184,872415232,838860800,956301312,612368384,717225984,
                   211812352,386924544,302514176,688128000,1015414784,516751360,1051492352,773734400,
                   914432000,63877120,807741440,165200896,748683776,118489344,168296832,486802240,
                   243663648,667747216,439124552,81674924,975249610,350138737],
                  [536870912,268435456,671088640,469762048,973078528,1023410176,713031680,339738624,
                   912261120,797966336,176685056,71565312,510263296,865533952,814120960,961232896,
                   887136256,668078080,116070400,382772224,1047134720,597098752,411468416,625689024,
                   249602976,449975248,745216680,43033924,134873446,201786361],
               [536870912,268435456,402653184,67108864,704643072,385875968,696254464,205520896,
                920649728,946864128,359137280,859045888,302907392,50659328,462192640,524599296,
                895541248,590794752,168810496,118033408,831447552,138662144,485185920,796511296,
                1021313184,1064304752,619184920,997458052,250479054,745865975],
               [536870912,268435456,939524096,1006632960,838860800,889192448,645922816,46137344,
                476053504,584056832,210239488,465829888,820903936,689897472,73695232,249118720,
                110075904,315338752,610637824,517665792,1049494016,785318144,376210304,735921088,
                402760480,738505552,168368744,151499820,344957894,936096557],
               [536870912,805306368,939524096,1006632960,503316480,922746880,41943040,423624704,
                228589568,651165696,195559424,500957184,791019520,261292032,1040285696,118407168,
                982065152,625250304,329533440,298984448,153690624,76845824,579619712,692987840,
                900670432,450334832,363187112,719119956,765461306,382730781],
               [536870912,805306368,402653184,603979776,838860800,117440512,478150656,658505728,
                752877568,1060110336,141033472,209453056,244187136,272957440,678068224,1014546432,
                377724928,876875776,443160576,998185984,168665600,318837504,914397568,71818816,
                40763680,527762288,939688008,335855668,705536494,587273091],
               [536870912,268435456,671088640,738197504,637534208,150994944,813694976,943718400,
                77594624,179306496,798490624,967049216,134348800,1006698496,235044864,620937216,
                377643008,826314752,874711040,854819840,725109248,856992512,664336768,94804544,
                100663328,419430416,411041832,339738668,580911142,61865993],
               [536870912,805306368,939524096,603979776,100663296,452984832,998244352,188743680,
                866123776,389021696,287834112,172228608,824836096,977731584,153714688,507854848,
                254402560,88403968,883578880,235160576,118055424,422917888,371224704,326210368,
                654926368,691353392,773877944,930190180,554263078,842348331]
               ]
{- BOTH payoffs below are INCORRECT!
payoff_2' :: Payoff
payoff_2' Pricing_Data{..} xss
              = let mins = [ minimum [a / 11840.0, b / 1200.0, c / 3758.05]
                             | [a,b,c] <- xss ]
                    discounted_premiums =
                        zipWith (*) model_discounts [1150.0, 1300.0, 1450.0, 1600.0, 1750]
                    premiums = dropWhile (\(p,_) -> p < 1.0) (zip mins discounted_premiums)
                               ++ [ (mins!!4, 1000.0 * model_discounts!!4)] -- default value
                    adjustment | length premiums == 1 && mins!!4 >= 0.75
                                   = model_discounts!!4 * 1000 * (1-mins!!4)
                               | otherwise = 0
                in snd (head premiums) - adjustment


          payoff_2 :: Payoff
          payoff_2 Pricing_Data{..} xss
            | length xss < 5 = error (show (xss))
            | otherwise
              = let mins = [ minimum [a / 11840.0, b / 1200.0, c / 3758.05]
                             | [a,b,c] <- xss ]
                    mins' = mins ++ [ mins!!4 , undefined ]
                    comparisons = [(>=1), (>=1), (>=1), (>=1), (>=1), (>0.75), const True]
                    discounted_payoffs =
                        zipWith (*) model_discounts [1150.0, 1300.0, 1450.0, 1600.0, 1750 ]
                                ++ map (* model_discounts!!4) [1000, 1000 * mins!!4]

                    premiums = [ pay | (pred,m,pay) <- zip3 comparisons mins' discounted_payoffs,
                                       pred m ]
                in head premiums -- should never be empty, last comparison being always true
-}


{-
------------------------------------

md_dim: 3, nb_path_dates: 5,
rng_dim: 3, rng_nb_dates: 5
-- sobol_count_ini: 0 ,
-- sobol_last_den_inv: 0.00000000093132257461547851562500,
sobol_bit_count: 30
inst_num: 1 , bb_l: 5

NUM_CONTRACTS: 1,
NUM_DET_PRICERS: 0,
NUM_CASH_FLOWS: 5
v_dir: [sobol_bit_count]x[sobol_dim]:
	{ 536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912 }
 	{ 268435456,805306368,805306368,805306368,805306368,805306368,805306368,268435456,268435456,268435456,268435456,805306368,805306368,268435456,805306368 }
 	{ 134217728,671088640,402653184,939524096,402653184,402653184,134217728,402653184,671088640,402653184,939524096,939524096,402653184,671088640,939524096 }
 	{ 67108864,1006632960,603979776,335544320,1006632960,469762048,1006632960,872415232,469762048,67108864,1006632960,1006632960,603979776,738197504,603979776 }
 	{ 33554432,570425344,973078528,234881024,167772160,301989888,503316480,838860800,973078528,704643072,838860800,503316480,838860800,637534208,100663296 }
 	{ 16777216,855638016,385875968,721420288,285212672,721420288,754974720,956301312,1023410176,385875968,889192448,922746880,117440512,150994944,452984832 }
 	{ 8388608,713031680,595591168,411041792,713031680,92274688,629145600,612368384,713031680,696254464,645922816,41943040,478150656,813694976,998244352 }
 	{ 4194304,1069547520,826277888,616562688,566231040,264241152,440401920,717225984,339738624,205520896,46137344,423624704,658505728,943718400,188743680 }
 	{ 2097152,538968064,438304768,920649728,853540864,941621248,94371840,211812352,912261120,920649728,476053504,228589568,752877568,77594624,866123776 }
 	{ 1048576,808452096,657457152,1062207488,489684992,741343232,711983104,386924544,797966336,946864128,584056832,651165696,1060110336,179306496,389021696 }
 	{ 524288,673710080,999817216,381157376,952631296,169345024,229113856,302514176,176685056,359137280,210239488,195559424,141033472,798490624,287834112 }
 	{ 262144,1010565120,358875136,258736128,208928768,924581888,374079488,688128000,71565312,859045888,465829888,500957184,209453056,967049216,172228608 }
 	{ 131072,572653568,538574848,771883008,316801024,395444224,330694656,1015414784,510263296,302907392,820903936,791019520,244187136,134348800,824836096 }
 	{ 65536,858980352,807862272,453181440,758317056,619380736,996212736,516751360,865533952,50659328,689897472,261292032,272957440,1006698496,977731584 }
 	{ 32768,715816960,406552576,545488896,550076416,1034256384,907247616,1051492352,814120960,462192640,73695232,1040285696,678068224,235044864,153714688 }
 	{ 16384,1073725440,605372416,817971200,813154304,603963392,557531136,773734400,961232896,524599296,249118720,118407168,1014546432,620937216,507854848 }
 	{ 8192,536879104,975183872,954261504,417505280,838868992,867573760,914432000,887136256,895541248,110075904,982065152,377724928,377643008,254402560 }
 	{ 4096,805318656,389033984,340963328,1009913856,452997120,190918656,63877120,668078080,590794752,315338752,625250304,876875776,826314752,88403968 }
 	{ 2048,671098880,597170176,238651392,172697600,494934016,1041467392,807741440,116070400,168810496,610637824,329533440,443160576,874711040,883578880 }
 	{ 1024,1006648320,828646400,732843008,297131008,331357184,490437632,165200896,382772224,118033408,517665792,298984448,998185984,854819840,235160576 }
 	{ 512,570434048,437926400,417426944,704744960,706744832,766918144,748683776,1047134720,831447552,1049494016,153690624,168665600,725109248,118055424 }
 	{ 256,855651072,656873216,609285376,553894656,120597248,643898624,118489344,597098752,138662144,785318144,76845824,318837504,856992512,422917888 }
 	{ 128,713042560,1002152832,909831040,847291520,261621120,462663040,168296832,411468416,485185920,376210304,579619712,914397568,664336768,371224704 }
 	{ 64,1069563840,357921088,1068349120,499194688,953946048,125527616,486802240,625689024,796511296,735921088,692987840,71818816,94804544,326210368 }
 	{ 32,538976288,536885792,383778848,954376224,800208928,672545696,243663648,249602976,1021313184,402760480,900670432,40763680,100663328,654926368 }
 	{ 16,808464432,805312304,256901168,204607536,148581424,202454896,667747216,449975248,1064304752,738505552,450334832,527762288,419430416,691353392 }
 	{ 8,673720360,402662296,783810616,306915352,935168536,373006376,439124552,745216680,619184920,168368744,363187112,939688008,411041832,773877944 }
 	{ 4,1010580540,603992420,460062740,766893116,350484252,288845836,81674924,43033924,997458052,151499820,719119956,335855668,339738668,930190180 }
 	{ 2,572662306,973085210,537001998,536972810,630339474,1000351766,975249610,134873446,250479054,344957894,765461306,705536494,580911142,554263078 }
 	{ 1,858993459,385885991,805503019,805552913,1072370923,930090001,350138737,201786361,745865975,936096557,382730781,587273091,61865993,842348331 }


bb_li : [5]
	{ 0, 0, 0, 2, 3 }
bb_bi : [5]
	{ 5, 2, 1, 3, 4 }
bb_ri : [5]
	{ 0, 5, 2, 5, 5 }
bb_rw : [5]
	{ 0.0000000000000000, 0.4001094690749863, 0.5006839945280438, 0.3330291970802919, 0.4993160054719562 }
bb_lw : [5]
	{ 0.0000000000000000, 0.5998905309250137, 0.4993160054719562, 0.6669708029197080, 0.5006839945280438 }
bb_sd : [5]
	{ 2.2372928847280580, 1.0960951589853829, 0.7075902730592357, 0.8166828043492210, 0.7075902730592357 }



FOR INSTANCE: 0

instRO: [3] IS:
	{3758.0500000000001819, 11840.0000000000000000, 1200.0000000000000000 }
inst_c: [3]x[3] IS:
	{ 1.0000000000000000 , 0.6000000000000000 , 0.8000000000000000  }
	{ 0.6000000000000000 , 0.8000000000000000 , 0.1500000000000000  }
	{ 0.8000000000000000 , 0.1500000000000000 , 0.5809475019311124  }
inst_vols: [3]x[3] IS:
	{ 0.1900000000000000 , 0.1900000000000000 , 0.1500000000000000  }
	{ 0.1900000000000000 , 0.1900000000000000 , 0.1500000000000000  }
	{ 0.1900000000000000 , 0.1900000000000000 , 0.1500000000000000  }
	{ 0.1900000000000000 , 0.1900000000000000 , 0.1500000000000000  }
	{ 0.1900000000000000 , 0.1900000000000000 , 0.1500000000000000  }
inst_drifts: [3]x[5] IS:
	{ -0.0283491736871803 , 0.0178771081725381 , 0.0043096808044729  }
	{ -0.0183841413744211 , -0.0044530897672834 , 0.0024263805987983  }
	{ -0.0172686581005089 , 0.0125638544546015 , 0.0094452810918001  }
	{ -0.0144179417871814 , 0.0157411263968213 , 0.0125315353728014  }
	{ -0.0121497422218761 , 0.0182904634062437 , 0.0151125070556484  }
deterministic_vals: [0] IS:
	{ }
discounts: [5] IS:
	{0.9797862861805930 , 0.9505748482484491 , 0.9214621679912968 , 0.8906693055891434 , 0.8588567633110704 }

-}
