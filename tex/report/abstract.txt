We evaluate the current state of functional data-parallel languages,
through the implementation of option pricing algorithms. Specifically,
we implement a lattice-based binomial option pricer, the least-squares
Monte Carlo algorithm, and a Sobol sequence generator.

Motivated by our attempts at implementing these algorithms, we
identify that both Nikola, Accelerate and the Haskell library Repa
lack support for iterative array construction. We suggest the addition
of new constructs and give several possible implementation strategies.

We demonstrate a lack of composability in the current languages,
caused by imposed limitations that forbid nested array operations.
This suggests that the problem of compiling nested parallel operations
should be adressed rather than avoided.

The currently most popular approach to compilation of irregular nested
data-parallel languages is the vectorisation transformation, as
implemented in NESL and Data Parallel Haskell. We suggest an
alternative approach for regular nested data-parallelism, which relies
on a cursor to mark the division between parallel and sequential code,
much inspired by similar constructs found in Repa. The approach allows
for experimentation with parallelisation strategies and we propose
that this can lead to a language for heterogeneous computing.
